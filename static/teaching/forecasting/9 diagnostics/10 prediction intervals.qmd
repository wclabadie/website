---
title: "Distributional forecasts and prediction intervals"
author: "BUS 323 Forecasting and Risk Analysis"
format: 
  revealjs:
    incremental: true
    html-math-method: mathjax
editor: visual
---

## Forecast distributions
* Forecasts have associated probability distribution
    * Typically Normal
    * Mean: point forecast

## Prediction intervals
* 95% interval for a Normally distributed $h$-step forecast:
  <div class="fragment">
  $$
  \widehat{y}_{T+h|T} \pm 1.96 \widehat{\sigma}_{h}
  $$
  </div>
  <div class="fragment">
  where $\widehat{\sigma}_{h}$ is the standard error of the $h$-step forecast.
  </div>

## Forecast standard error
* Where do we get $\widehat{\sigma}_{h}$ from?
  + Need residual standard error first
  + Next, we can find the distribution standard error.
  
## Forecast standard error: demonstration
* e.g. for a mean forecast:
<div class="fragment">
$$
\widehat{y}_{T+h|T} = \bar{y}
$$
</div>
<div class="fragment">
The residual is $e_{T+h} = y_{T+h} - \bar{y}$. 
</div>
* $y_{T+h} \sim N(0,\sigma)$.
* $\bar{y} \sim N(0,\sqrt{\frac{\sigma^{2}}{T}})$.
* Thus $e_{T+H} \sim N(0, \sqrt{\sigma^{2} + \frac{\sigma^{2}}{T}})$.

## Forecast standard error: demonstration
* Constant forecast with this method
<div class="fragment">
$\rightarrow$ Constant forecast standard error of $\sigma \sqrt{1 + \frac{1}{t}}$.
</div>

## Forecast standard errors: other methods
* Mean: $\widehat{\sigma}_{h} = \widehat{\sigma} \sqrt{1 + \frac{1}{T}}$
* Naive: $\widehat{\sigma}_{h} = \widehat{\sigma} \sqrt{h}$
* Seasonal naive: $\widehat{\sigma}_{h} = \widehat{\sigma} \sqrt{k+1}$
  + where $k$ represents $\frac{h-1}{m}$ and $m$ represents the seasonal period
* Drift: $\widehat{\sigma}_{h} = \widehat{\sigma} \sqrt{h(1 + \frac{h}{T-1})}$

## Computing prediction intervals with R
* Using the pakcage ```fable``` (within ```fpp3```) and function ```hilo()```:
```{r}
#| echo: false
#| output: false
library(fpp3)
library(knitr)
# Re-index to trading days
google_stock <- gafa_stock |>
  filter(Symbol == "GOOG", year(Date) >= 2015) |>
  mutate(day = row_number()) |>
  update_tsibble(index = day, regular = TRUE)
# Filter the year of interest
google_2015 <- google_stock |> filter(year(Date) == 2015)
```
```{r}
#| echo: true
#| output: true
preds <- google_2015 |>
  model(NAIVE(Close)) |>
  forecast(h = 10) |>
  hilo()
kable(preds)
```

## Computing prediction intervals with R
* Use the ```level``` option for different levels of confidence.

## Prediction intervals from bootstrapped residuals
* Normal distribution not always a reasonable assumption.
  + Bootstrapping: non-parametric method of generating prediction intervals
* Suppose a naive forecast: $y_{t} = y_{t-1} + e_{t}$.
  + Bootstrapping *assumes future residuals will be similar to past residuals*. 
  + For $t>T$, use $e_{t|t \leq T}$ to model $e_{t}$.

## prediction intervals from bootstrapped residuals
* Thus we can simulate: $y_{T+1}^{*} = y_{T} + e_{T+1}^{*}$. 
  + Where $e_{T+1}^{*}$ is a randomly sampled observed residual.
  $y_{T+1}^{*}$ is the forecast under that particular residual value.
* Repeat: $y_{T+2}^{*} = y_{T+1}^{*} + e_{T+2}^{*}$.
  + We can obtain many possible futures by repeating this process.
  
## Bootstrap prediction intervals demonstration
* To see how this works, use the ```generate()``` function:
```{r}
#| echo: true
#| output: true
fit <- google_2015 |>
  model(NAIVE(Close))
sim <- fit |> generate(h = 30, times = 5, bootstrap = TRUE)
sim
```

## Bootstrap prediction intervals demonstration
* Here are our five simulated futures plotted:
```{r}
#| echo: true
#| output: false
google_2015 |>
  ggplot(aes(x = day)) +
  geom_line(aes(y = Close)) +
  geom_line(aes(y = .sim, colour = as.factor(.rep)),
    data = sim) +
  labs(title="Google daily closing stock price", y="$US" ) +
  guides(colour = "none")
```

## Bootstrap prediction intervals demonstration
* Here are our five simulated futures plotted:
```{r}
#| echo: false
#| output: true
google_2015 |>
  ggplot(aes(x = day)) +
  geom_line(aes(y = Close)) +
  geom_line(aes(y = .sim, colour = as.factor(.rep)),
    data = sim) +
  labs(title="Google daily closing stock price", y="$US" ) +
  guides(colour = "none")
```

## Bootstrap prediction intervals: bootstrapped distribution
* With these we can manufacture a "probability distribution".
* Luckily there is a ```bootstrap``` option built into ```forecast()```:
```{r}
#| echo: true
#| output: true
fc <- fit |> forecast(h=30, bootstrap=TRUE)
fc
```

## Bootstrap prediction intervals: bootstrapped distribution
* Note that the ```.mean``` column is the mean of the bootstraps.
```{r}
#| echo: true
#| output: true
autoplot(fc, google_2015) +
  labs(title="Google daily closing stock price", y="$US" )
```

## Bootstrapping in R
* Number of samples is controlled with the ```times``` option:
```{r}
#| echo: true
#| output: true
bootstraps <- google_2015 |>
  model(NAIVE(Close)) |>
  forecast(h = 10, bootstrap = TRUE, times = 1000) |>
  hilo()
kable(bootstraps)
```

## Exercise
* Create a 90% and 99% prediction interval for the forecast you produced last time.
* Create a bootstrapped forecast for the forecast you produced last time (try a bunch of different number of bootstraps)